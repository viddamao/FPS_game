Math Check

Wenjun Mao
netID : wm56

Just as I described previously in the proposal, the game is a FPS game in a rendered map, therefore the first and most crucial problem is collision detection.

The math model for this problem is some what similar to the ray tracing problem.
So just imagine a similar FPS game like Counter Strike or Call of Duty,
the player class will keep track of the current position of the weapon and the direction of the weapon pointing at.
We call them pos[x,y,z]         position 
and dir[x,y,z]					normalized direction vector

so we can get a set of points on the array.
R(t)= pos + dir * t with t>0.0

Then to build the model of the enemy to enable ray tracing.
To make the model simpler, I am  thinking of instead of using complex models, multiple spherical hit zones will be defined on enemy that only hitting those zones will cause damage.

So we are able to do multiple ray traces on those spheres.
If a sphere zone is hit, corresponding hp will be subtracted from the enemy.

Similar with the ray tracer problem homeworks.
Imagine a point with position (0,0,0) and direction vector (1,1,1),
intersecting with a sphere of radius 1.25 and centered at (1,1,1)

Using the algebraic solution
For ray:
X = X0 + Xd * t
Y = Y0 + Yd * t
Z = Z0 + Zd * t
putting X, Y, Z into the sphere equation for Xs, Ys, Zs
A*t^2 + B*t + C = 0
with: A = Xd^2 + Yd^2 + Zd^2
B = 2 * (Xd * (X0 - Xc) + Yd * (Y0 - Yc) + Zd * (Z0 - Zc))
C = (X0 - Xc)^2 + (Y0 - Yc)^2 + (Z0 - Zc)^2 - Sr^2
So that we have 
t0= (- B - (B^2 - 4*AC)^1/2) / 2A
t1= (- B + (B^2 - 4*AC)^1/2) / 2A

Ray 
(0,0,0) , (1,1,1)
Surface
A sphere of radius 1.25 centered at (1,1,1)
with,
A = Xd^2 + Yd^2 + Zd^2 = 3
B = 2 * (Xd * (X0 - Xc) + Yd * (Y0 - Yc) + Zd * (Z0 - Zc)) = -6
C = (X0 - Xc)^2 + (Y0 - Yc)^2 + (Z0 - Zc)^2 - Sr^2 = 1.4375
So that,
t0= (- B - (B^2 - 4*AC)^1/2) / 2A = 1.7217
t1= (- B + (B^2 - 4*AC)^1/2) / 2A = 0.2783
so there are two intersect points,
which are
X = X0 + Xd * t
Y = Y0 + Yd * t
Z = Z0 + Zd * t
We can get (0.2783,0.2783,0.2783), and (1.7217,1.7217,1.7217)

So based on the above methods we are able to track the collision of bullets and the enemy.

And for the character movement,
my solution is to use a input 2-D matrix to display the map and limiting the character 
in the regions calculated based on the input matrix to solve the collision with object problem.
for example, for a simple map below:
xxxxxxxxx
xooooooox
xoxxoxxox
xoxxoxxox
xooooooox
xoxxoxxox
xoxxoxxox
xooooooox
xxxxxxxxx
This map demostrates a simpler version of the CS map ice_world, where exists 4 objects in the middle 
of the map and the player can move around in the "o" areas.
